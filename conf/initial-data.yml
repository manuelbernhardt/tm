account.Account(accountTest):
    name: Oxiras ApS
    subdomain: test
    email: info@oxiras.com

account.User(testUserGwen):
    firstName: Gwenael
    lastName: Alizon
    email: gwenael.alizon@oxiras.com
    password: gwen
    account: accountTest

account.User(testUserManu):
    firstName: Manuel
    lastName: Bernhardt
    email: manuel.bernhardt@oxiras.com
    password: manu
    account: accountTest

account.User(testUserNikola):
    firstName: Nikola
    lastName: Milivojevic
    email: nikola@example.com
    password: nikola
    account: accountTest

account.User(testUserFilip):
    firstName: Filip
    lastName: Kis
    email: filip@example.com
    password: filip
    account: accountTest

account.User(testUserTamara):
    firstName: Tamara
    lastName: Forza
    email: tamara.forza@gmail.com
    password: tamy
    account: accountTest

account.User(testUserChristian):
    firstName: Christian
    lastName: Carlsen
    email: christian@example.com
    password: christian
    account: accountTest

account.User(testUserAdminUser):
    firstName: Ballmer
    lastName: Peak
    email: UserAdmin@testUser.com
    password: testAuth
    account: accountTest

account.User(testProjectAdminUser):
    firstName: Angelina
    lastName: Jolie
    email: ProjectAdmin@testUser.com
    password: testAuth
    account: accountTest

account.User(testAccountAdminUser):
    firstName: Steven
    lastName: Springberg
    email: AccountAdmin@testUser.com
    password: testAuth
    account: accountTest

account.User(testRequirementsViewUser):
    firstName: Eddie
    lastName: Larrisson
    email: RequirementsView@testUser.com
    password: testAuth
    account: accountTest

account.User(testRequirementsEditUser):
    firstName: Eddie
    lastName: Larrisson 2
    email: RequirementsEdit@testUser.com
    password: testAuth
    account: accountTest

account.User(testRequirementsCreateUser):
    firstName: Eddie
    lastName: Larrisson 3
    email: RequirementsCreate@testUser.com
    password: testAuth
    account: accountTest

account.User(testRequirementsDeleteUser):
    firstName: Eddie
    lastName: Larrisson 4
    email: RequirementsDelete@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestRepositoryViewUser):
    firstName: William
    lastName: Windows
    email: TestRepositoryView@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestRepositoryEditUser):
    firstName: William
    lastName: Windows 2
    email: TestRepositoryEdit@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestRepositoryCreateUser):
    firstName: William
    lastName: Windows 3
    email: TestRepositoryCreate@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestRepositoryDeleteUser):
    firstName: William
    lastName: Windows 4
    email: TestRepositoryDelete@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestPreparationViewUser):
    firstName: Scala
    lastName: Johansson
    email: TestPreparationView@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestPreparationEditUser):
    firstName: Scala
    lastName: Johansson 2
    email: TestPreparationEdit@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestPreparationCreateUser):
    firstName: Scala
    lastName: Johansson 3
    email: TestPreparationCreate@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestPreparationDeleteUser):
    firstName: Scala
    lastName: Johansson 4
    email: TestPreparationDelete@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestExecutionViewUser):
    firstName: Lenny
    lastName: Linux
    email: TestExecutionView@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestExecutionEditUser):
    firstName: Lenny
    lastName: Linux 2
    email: TestExecutionEdit@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestExecutionCreateUser):
    firstName: Lenny
    lastName: Linux 3
    email: TestExecutionCreate@testUser.com
    password: testAuth
    account: accountTest

account.User(testTestExecutionDeleteUser):
    firstName: Lenny
    lastName: Linux 4
    email: TestExecutionDelete@testUser.com
    password: testAuth
    account: accountTest

account.User(testDefectsViewUser):
    firstName: Mona Lisa
    lastName: Harddrive
    email: DefectsView@testUser.com
    password: testAuth
    account: accountTest

account.User(testDefectsEditUser):
    firstName: Mona Lisa
    lastName: Harddrive 2
    email: DefectsEdit@testUser.com
    password: testAuth
    account: accountTest

account.User(testDefectsCreateUser):
    firstName: Mona Lisa
    lastName: Harddrive 3
    email: DefectsCreate@testUser.com
    password: testAuth
    account: accountTest

account.User(testDefectsDeleteUser):
    firstName: Mona Lisa
    lastName: Harddrive 4
    email: DefectsDelete@testUser.com
    password: testAuth
    account: accountTest

tm.ProjectCategory(testTMprojCat2011):
    name: 2011
    account: accountTest

tm.ProjectCategory(testTMprojCat2012):
    name: 2012
    account: accountTest

tm.Project(testTMtestProject1):
    name: TM Application - test project 1
    account: accountTest
    projectCategory: testTMprojCat2011

tm.Project(testTMtestProject2):
    name: TM Application - test project 2
    account: accountTest
    projectCategory: testTMprojCat2011

tm.Project(testTMtestProject3):
    name: TM Application - test project 3
    account: accountTest
    projectCategory: testTMprojCat2012

tm.ProjectRole(testTMtestProject1RoleViewOnly):
    name: View only
    account: accountTest
    project: testTMtestProject1
    unitRoles:
         - reqView
         - approachView
         - testPrepView
         - testExecView
         - defectView

tm.ProjectRole(testTMtestProject2RoleTestLead):
    name: Test Lead
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - projectEdit
         - reqView
         - reqCreate
         - reqEdit
         - reqDelete
         - testRepoView
         - testRepoCreate
         - testRepoEdit
         - testRepoDelete
         - testPrepView
         - testPrepCreate
         - testPrepEdit
         - testPrepDelete
         - testExecView
         - testExecCreate
         - testExecEdit
         - testExecDelete
         - defectView
         - defectCreate
         - defectEdit
         - defectDelete

tm.ProjectRole(testTMtestProject2RoleRequirementsView):
    name: (unit) Requirement view
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - reqView

tm.ProjectRole(testTMtestProject2RoleRequirementsEdit):
    name: (unit) Requirement edit
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - reqView
         - reqEdit

tm.ProjectRole(testTMtestProject2RoleRequirementsCreate):
    name: (unit) Requirement create
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - reqView
         - reqCreate

tm.ProjectRole(testTMtestProject2RoleRequirementsDelete):
    name: (unit) Requirement delete
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - reqView
         - reqDelete

tm.ProjectRole(testTMtestProject2RoleRequirementsAll):
    name: Requirement all
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - reqView
         - reqCreate
         - reqEdit
         - reqDelete

tm.ProjectRole(testTMtestProject2RoleTestRepoView):
    name: (unit) Test Repository view
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testRepoView

tm.ProjectRole(testTMtestProject2RoleTestRepoEdit):
    name: (unit) Test Repository edit
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testRepoView
         - testRepoEdit

tm.ProjectRole(testTMtestProject2RoleTestRepoCreate):
    name: (unit) Test Repository create
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testRepoView
         - testRepoCreate

tm.ProjectRole(testTMtestProject2RoleTestRepoDelete):
    name: (unit) Test Repository delete
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testRepoView
         - testRepoDelete

tm.ProjectRole(testTMtestProject2RoleTestRepoAll):
    name: Test Designer
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testRepoView
         - testRepoCreate
         - testRepoEdit
         - testRepoDelete

tm.ProjectRole(testTMtestProject2RoleTestPreparationView):
    name: (unit) Test Preparation view
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testPrepView

tm.ProjectRole(testTMtestProject2RoleTestPreparationEdit):
    name: (unit) Test Preparation edit
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testPrepView
         - testPrepEdit

tm.ProjectRole(testTMtestProject2RoleTestPreparationCreate):
    name: (unit) Test Preparation create
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testPrepView
         - testPrepCreate

tm.ProjectRole(testTMtestProject2RoleTestPreparationDelete):
    name: (unit) Test Preparation delete
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testPrepView
         - testPrepDelete

tm.ProjectRole(testTMtestProject2RoleTestPreparationAll):
    name: Test Preparation
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testPrepView
         - testPrepCreate
         - testPrepEdit
         - testPrepDelete

tm.ProjectRole(testTMtestProject2RoleTestExecutionAll):
    name: (unit) Test Execution view
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testExecView

tm.ProjectRole(testTMtestProject2RoleTestExecutionEdit):
    name: (unit) Test Execution edit
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testExecView
         - testExecEdit

tm.ProjectRole(testTMtestProject2RoleTestExecutionCreate):
    name: (unit) Test Execution create
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testExecView
         - testExecCreate

tm.ProjectRole(testTMtestProject2RoleTestExecutionDelete):
    name: (unit) Test Execution delete
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testExecView
         - testExecDelete

tm.ProjectRole(testTMtestProject2RoleTestExecution):
    name: Test Execution
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - testExecView
         - testExecCreate
         - testExecEdit
         - defectView
         - defectCreate
         - defectEdit

tm.ProjectRole(testTMtestProject2RoleDefectsView):
    name: (unit) Defect view
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - defectView

tm.ProjectRole(testTMtestProject2RoleDefectsEdit):
    name: (unit) Defect edit
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - defectView
         - defectEdit

tm.ProjectRole(testTMtestProject2RoleDefectsCreate):
    name: (unit) Defect create
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - defectView
         - defectCreate

tm.ProjectRole(testTMtestProject2RoleDefectsDelete):
    name: (unit) Defect delete
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - defectView
         - defectDelete

tm.ProjectRole(testTMtestProject2RoleDefectsResolution):
    name: Defect resolution
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - defectView
         - defectCreate
         - defectEdit

tm.ProjectRole(testTMtestProject2RoleViewOnly):
    name: View only
    account: accountTest
    project: testTMtestProject2
    unitRoles:
         - reqView
         - approachView
         - testPrepView
         - testExecView
         - defectView

tm.TMUser(testTMuserGwen):
    user: testUserGwen
    account: accountTest
    activeProject: testTMtestProject2
    accountRoles:
       - accountAdmin
       - userCreate
       - userEdit
       - userDelete
       - projectCreate
       - projectEdit
       - projectDelete
    projectRoles:
       - testTMtestProject2RoleTestLead
       - testTMtestProject1RoleViewOnly

tm.TMUser(testTMuserManu):
    user: testUserManu
    account: accountTest
    activeProject: testTMtestProject2
    accountRoles:
       - accountAdmin
       - userCreate
       - userEdit
       - userDelete
       - projectCreate
       - projectEdit
       - projectDelete
    projectRoles:
       - testTMtestProject2RoleTestLead
       - testTMtestProject2RoleViewOnly
       - testTMtestProject1RoleViewOnly

tm.TMUser(testTMuserNikola):
    user: testUserNikola
    account: accountTest
    accountRoles:
       - accountAdmin
       - userCreate
       - userEdit
       - userDelete
       - projectCreate
       - projectEdit
       - projectDelete
    activeProject: testTMtestProject1
    projectRoles:
       - testTMtestProject1RoleViewOnly

tm.TMUser(testTMuserFilip):
    user: testUserFilip
    account: accountTest
    accountRoles:
       - accountAdmin
       - userCreate
       - userEdit
       - userDelete
       - projectCreate
       - projectEdit
       - projectDelete
    activeProject: testTMtestProject1
    projectRoles:
       - testTMtestProject1RoleViewOnly

tm.TMUser(testTMuserTamara):
    user: testUserTamara
    account: accountTest
    activeProject: testTMtestProject2
    projectRoles:
       - testTMtestProject1RoleViewOnly
       - testTMtestProject2RoleTestExecution

tm.TMUser(testTMuserChristian):
    user: testUserChristian
    account: accountTest
    accountRoles:
       - accountAdmin
       - userCreate
       - userEdit
       - userDelete
       - projectCreate
       - projectEdit
       - projectDelete
    activeProject: testTMtestProject2
    projectRoles:
       - testTMtestProject2RoleTestLead

tm.TMUser(testTMuserAccountAdmin):
    user: testAccountAdminUser
    account: accountTest
    accountRoles:
       - accountAdmin

tm.TMUser(testTMuserProjectAdmin):
    user: testProjectAdminUser
    account: accountTest
    accountRoles:
       - projectCreate
       - projectEdit
       - projectDelete

tm.TMUser(testTMuserUserAdmin):
    user: testUserAdminUser
    account: accountTest
    accountRoles:
       - userCreate
       - userEdit
       - userDelete

tm.TMUser(testTMuserRequirementsView):
    user: testRequirementsViewUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleRequirementsView

tm.TMUser(testTMuserRequirementsEdit):
    user: testRequirementsEditUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleRequirementsEdit

tm.TMUser(testTMuserRequirementsCreate):
    user: testRequirementsCreateUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleRequirementsCreate

tm.TMUser(testTMuserRequirementsDelete):
    user: testRequirementsDeleteUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleRequirementsDelete

tm.TMUser(testTMuserTestRepositoryView):
    user: testTestRepositoryViewUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestRepoView

tm.TMUser(testTMuserTestRepositoryEdit):
    user: testTestRepositoryEditUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestRepoEdit

tm.TMUser(testTMuserTestRepositoryCreate):
    user: testTestRepositoryCreateUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestRepoCreate

tm.TMUser(testTMuserTestRepositoryDelete):
    user: testTestRepositoryDeleteUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestRepoDelete

tm.TMUser(testTMuserTestPreparationView):
    user: testTestPreparationViewUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestPreparationView

tm.TMUser(testTMuserTestPreparationEdit):
    user: testTestPreparationEditUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestPreparationEdit

tm.TMUser(testTMuserTestPreparationCreate):
    user: testTestPreparationCreateUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestPreparationCreate

tm.TMUser(testTMuserTestPreparationDelete):
    user: testTestPreparationDeleteUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestPreparationDelete

tm.TMUser(testTMuserTestExecutionView):
    user: testTestExecutionViewUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestExecutionAll

tm.TMUser(testTMuserTestExecutionEdit):
    user: testTestExecutionEditUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestExecutionEdit

tm.TMUser(testTMuserTestExecutionCreate):
    user: testTestExecutionCreateUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestExecutionCreate

tm.TMUser(testTMuserTestExecutionDelete):
    user: testTestExecutionDeleteUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleTestExecutionDelete

tm.TMUser(testTMuserDefectsView):
    user: testDefectsViewUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleDefectsView

tm.TMUser(testTMuserDefectsEdit):
    user: testDefectsEditUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleDefectsEdit

tm.TMUser(testTMuserDefectsCreate):
    user: testDefectsCreateUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleDefectsCreate

tm.TMUser(testTMuserDefectsDelete):
    user: testDefectsDeleteUser
    account: accountTest
    projectRoles:
       -  testTMtestProject2RoleDefectsDelete

tm.approach.Release(testTMtestProject2ReleaseProto):
    account: accountTest
    project: testTMtestProject2
    name: Proto

tm.approach.TestCycle(testTMtestProject2ReleaseProtoTestCycleUnitTest):
    account: accountTest
    project: testTMtestProject2
    name: Unit test
    fromDate: 2011-03-01
    toDate: 2011-03-12

tm.approach.TestCycle(testTMtestProject2ReleaseProtoTestCycleSystemTest):
    account: accountTest
    project: testTMtestProject2
    name: System Test
    fromDate: 2011-03-15
    toDate: 2011-03-19

tm.approach.TestCycle(testTMtestProject2ReleaseProtoTestCycleUserAcceptanceTest):
    account: accountTest
    project: testTMtestProject2
    name: User Acceptance test
    fromDate: 2011-03-22
    toDate: 2011-03-25

tm.approach.Release(testTMtestProject2ReleaseBeta):
    account: accountTest
    project: testTMtestProject2
    name: Beta

tm.approach.Release(testTMtestProject2ReleaseV1):
    account: accountTest
    project: testTMtestProject2
    name: V1

tm.ProjectTreeNode(testTMtestProject2ApproachTreeNodeReleaseProto):
    account: accountTest
    level: 0
    name: Proto
    nodeId: testTMtestProject2ReleaseProto
    opened: true
    path: '/Proto'
    treeId: approachTree
    type: release
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2ApproachTreeNodeReleaseProtoTestCycleUnitTest):
    account: accountTest
    level: 1
    name: Unit Test
    nodeId: testTMtestProject2ReleaseProtoTestCycleUnitTest
    opened: false
    path: '/Proto/Unit Test'
    treeId: approachTree
    type: testCycle
    threadRoot: testTMtestProject2ApproachTreeNodeReleaseProto
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2ApproachTreeNodeReleaseProtoTestCycleUnitTest):
    account: accountTest
    level: 1
    name: System Test
    nodeId: testTMtestProject2ReleaseProtoTestCycleSystemTest
    opened: false
    path: '/Proto/System Test'
    treeId: approachTree
    type: testCycle
    threadRoot: testTMtestProject2ApproachTreeNodeReleaseProto
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2ApproachTreeNodeReleaseProtoTestCycleUserAcceptanceTest):
    account: accountTest
    level: 1
    name: User Acceptance Test
    nodeId: testTMtestProject2ReleaseProtoTestCycleUserAcceptanceTest
    opened: false
    path: '/Proto/User Acceptance Test'
    treeId: approachTree
    type: testCycle
    threadRoot: testTMtestProject2ApproachTreeNodeReleaseProto
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2ApproachTreeNodeReleaseBeta):
    account: accountTest
    level: 0
    name: Beta
    nodeId: testTMtestProject2ReleaseBeta
    opened: true
    path: '/Beta'
    treeId: approachTree
    type: release
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2ApproachTreeNodeReleaseV1):
    account: accountTest
    level: 0
    name: V1
    nodeId: testTMtestProject2ReleaseV1
    opened: true
    path: '/V1'
    treeId: approachTree
    type: release
    project: testTMtestProject2

tm.test.ScriptFolder(testTMtestProject2TestScriptFolderAdmin):
    account: accountTest
    project: testTMtestProject2
    name: Administration

tm.test.ScriptFolder(testTMtestProject2TestScriptFolderAdminUsers):
    account: accountTest
    project: testTMtestProject2
    name: Users

tm.test.ScriptFolder(testTMtestProject2TestScriptFolderAdminProjects):
    account: accountTest
    project: testTMtestProject2
    name: Projects

tm.test.Script(testTMtestProject2TestScriptAdminProjectsCreate):
    account: accountTest
    project: testTMtestProject2
    name: Create new project
    createdBy: testTMuserGwen

tm.test.ScriptParam(testTMtestProject2TestScriptAdminProjectsCreateParamProjectCategory):
    account: accountTest
    project: testTMtestProject2
    script: testTMtestProject2TestScriptAdminProjectsCreate
    name: projectCategory

tm.test.ScriptParam(testTMtestProject2TestScriptAdminProjectsCreateParamProjectName):
    account: accountTest
    project: testTMtestProject2
    script: testTMtestProject2TestScriptAdminProjectsCreate
    name: projectName

tm.test.ScriptStep(testTMtestProject2TestScriptAdminProjectsCreateStep1):
    account: accountTest
    project: testTMtestProject2
    script: testTMtestProject2TestScriptAdminProjectsCreate
    position: 1
    name: Step 1
    description: Enter the URL /admin/projects
    expectedResult: Projects administration page is shown

tm.test.ScriptStep(testTMtestProject2TestScriptAdminProjectsCreateStep2):
    account: accountTest
    project: testTMtestProject2
    script: testTMtestProject2TestScriptAdminProjectsCreate
    position: 2
    name: Step 2
    description: "Select project category \u003C\u003C\u003CprojectCategory\u003E\u003E\u003E and click on New project"
    expectedResult: A new node appears in the tree under the selected project category

tm.test.ScriptStep(testTMtestProject2TestScriptAdminProjectsCreateStep3):
    account: accountTest
    project: testTMtestProject2
    script: testTMtestProject2TestScriptAdminProjectsCreate
    position: 3
    name: Step 3
    description: "Enter \u003C\u003C\u003CprojectName\u003E\u003E\u003E and press enter"
    expectedResult: "New project \u003C\u003C\u003CprojectName\u003E\u003E\u003E is available"

tm.test.Script(testTMtestProject2TestScriptAdminProjectsEdit):
    account: accountTest
    project: testTMtestProject2
    name: Edit project details
    createdBy: testTMuserGwen

tm.test.ScriptFolder(testTMtestProject2TestScriptFolderRequirements):
    account: accountTest
    project: testTMtestProject2
    name: Requirement management
    createdBy: testTMuserGwen

tm.test.Script(testTMtestProject2TestScriptReqCreate):
    account: accountTest
    project: testTMtestProject2
    name: Register new requirement
    createdBy: testTMuserGwen

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderAdministration):
    account: accountTest
    level: 0
    name: Administration
    nodeId: testTMtestProject2TestScriptFolderAdmin
    opened: true
    path: '/Administration'
    treeId: repositoryTree
    type: scriptFolder
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderAdministrationUsers):
    account: accountTest
    level: 1
    name: Users
    nodeId: testTMtestProject2TestScriptFolderAdminUsers
    opened: true
    path: '/Administration/Users'
    treeId: repositoryTree
    type: scriptFolder
    threadRoot: testTMtestProject2RepositoryTreeNodeFolderAdministration
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderAdministrationProjects):
    account: accountTest
    level: 1
    name: Projects
    nodeId: testTMtestProject2TestScriptFolderAdminProjects
    opened: true
    path: '/Administration/Projects'
    treeId: repositoryTree
    type: scriptFolder
    threadRoot: testTMtestProject2RepositoryTreeNodeFolderAdministration
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderAdministrationProjectsScriptProjectCreate):
    account: accountTest
    level: 2
    name: Create new project
    nodeId: testTMtestProject2TestScriptAdminProjectsCreate
    opened: true
    path: '/Administration/Projects/Create new project'
    treeId: repositoryTree
    type: script
    threadRoot: testTMtestProject2RepositoryTreeNodeFolderAdministration
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderAdministrationProjectsScriptProjectEdit):
    account: accountTest
    level: 2
    name: Edit project details
    nodeId: testTMtestProject2TestScriptAdminProjectsEdit
    opened: true
    path: '/Administration/Projects/Edit project details'
    treeId: repositoryTree
    type: script
    threadRoot: testTMtestProject2RepositoryTreeNodeFolderAdministration
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderRequirements):
    account: accountTest
    level: 0
    name: Requirement Management
    nodeId: testTMtestProject2TestScriptFolderRequirements
    opened: true
    path: '/Requirement Management'
    treeId: repositoryTree
    type: scriptFolder
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RepositoryTreeNodeFolderRequirementsScriptRequirementCreate):
    account: accountTest
    level: 1
    name: Register new requirement
    nodeId: testTMtestProject2TestScriptReqCreate
    opened: true
    path: '/Requirement Management/Register new requirement'
    treeId: repositoryTree
    type: script
    threadRoot: testTMtestProject2RepositoryTreeNodeFolderRequirements
    project: testTMtestProject2

tm.test.Tag(testTMtestProject2RequirementTagFunctional):
    account: accountTest
    project: testTMtestProject2
    name: Functional
    type: REQUIREMENT

tm.test.Tag(testTMtestProject2RequirementTag-Technical):
    account: accountTest
    project: testTMtestProject2
    name: Technical
    type: REQUIREMENT


tm.RequirementFolder(testTMtestProject2RequirementFolder-RequirementManagement):
    project: testTMtestProject2
    account: accountTest
    name: Requirement management

tm.Requirement(testTMtestProject2RequirementFolderRequirementManagementRequirement-CreateReq):
    project: testTMtestProject2
    account: accountTest
    createdBy: testTMuserGwen
    name: Create requirement
    tags:
         - testTMtestProject2RequirementTagFunctional
    linkedScripts:
         - testTMtestProject2TestScriptReqCreate

tm.Requirement(testTMtestProject2RequirementFolderRequirementManagementRequirement-ListReq):
    project: testTMtestProject2
    account: accountTest
    createdBy: testTMuserGwen
    name: List requirements (tree)
    tags:
         - testTMtestProject2RequirementTagFunctional

tm.Requirement(testTMtestProject2RequirementFolderRequirementManagementRequirement-DisplayReqDetails):
    project: testTMtestProject2
    account: accountTest
    createdBy: testTMuserGwen
    name: Display requirement details
    tags:
         - testTMtestProject2RequirementTagFunctional

tm.Requirement(testTMtestProject2RequirementFolderRequirementManagementRequirement-DisplayLinkedEntities):
    project: testTMtestProject2
    account: accountTest
    createdBy: testTMuserGwen
    name: Display entities linked to requirement
    tags:
         - testTMtestProject2RequirementTagFunctional

tm.RequirementFolder(testTMtestProject2RequirementFolder-CrossConcerns):
    project: testTMtestProject2
    account: accountTest
    name: Cross concerns

tm.Requirement(testTMtestProject2RequirementFolderCrossConcernsRequirement-SortableDatatables):
    project: testTMtestProject2
    account: accountTest
    createdBy: testTMuserGwen
    name: Datatables need to be sortable
    tags:
         - testTMtestProject2RequirementTag-Technical

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolder-RequirementManagement):
    account: accountTest
    level: 0
    name: Requirement management
    nodeId: testTMtestProject2RequirementFolder-RequirementManagement
    opened: true
    path: '/Requirement management'
    treeId: requirementTree
    type: requirementFolder
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolderRequirementManagementRequirement-CreateReq):
    account: accountTest
    level: 1
    name: Create requirement
    nodeId: testTMtestProject2RequirementFolderRequirementManagementRequirement-CreateReq
    opened: false
    path: '/Requirement management/Create requirement'
    treeId: requirementTree
    type: requirement
    threadRoot: testTMtestProject2RequirementTreeNodeFolder-RequirementManagement
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolderRequirementManagementRequirement-ListReq):
    account: accountTest
    level: 1
    name: List requirements (tree)
    nodeId: testTMtestProject2RequirementFolderRequirementManagementRequirement-ListReq
    opened: false
    path: '/Requirement management/List requirements (tree)'
    treeId: requirementTree
    type: requirement
    threadRoot: testTMtestProject2RequirementTreeNodeFolder-RequirementManagement
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolderRequirementManagementRequirement-DisplayReqDetails):
    account: accountTest
    level: 1
    name: Display requirement details
    nodeId: testTMtestProject2RequirementFolderRequirementManagementRequirement-DisplayReqDetails
    opened: false
    path: '/Requirement management/Display requirement details'
    treeId: requirementTree
    type: requirement
    threadRoot: testTMtestProject2RequirementTreeNodeFolder-RequirementManagement
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolderRequirementManagementRequirement-DisplayLinkedEntities):
    account: accountTest
    level: 1
    name: Display entities linked to requirement
    nodeId: testTMtestProject2RequirementFolderRequirementManagementRequirement-DisplayLinkedEntities
    opened: false
    path: '/Requirement management/Display entities linked to requirement'
    treeId: requirementTree
    type: requirement
    threadRoot: testTMtestProject2RequirementTreeNodeFolder-RequirementManagement
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolder-CrossConcerns):
    account: accountTest
    level: 0
    name: Cross concerns
    nodeId: testTMtestProject2RequirementFolder-CrossConcerns
    opened: false
    path: '/Cross concerns'
    treeId: requirementTree
    type: requirementFolder
    project: testTMtestProject2

tm.ProjectTreeNode(testTMtestProject2RequirementTreeNodeFolderCrossConcernsRequirement-SortableDatatables):
    account: accountTest
    level: 1
    name: Datatables need to be sortable
    nodeId: testTMtestProject2RequirementFolderCrossConcernsRequirement-SortableDatatables
    opened: false
    path: '/Cross concerns/Datatables need to be sortable'
    treeId: requirementTree
    type: requirement
    threadRoot: testTMtestProject2RequirementTreeNodeFolder-CrossConcerns
    project: testTMtestProject2

tm.test.Tag(testTMtestProject2InstanceTagAdministration):
    account: accountTest
    project: testTMtestProject2
    name: Administration
    type: TESTINSTANCE

tm.test.Tag(testTMtestProject2InstanceTagUsers):
    account: accountTest
    project: testTMtestProject2
    name: Users
    type: TESTINSTANCE

tm.test.Tag(testTMtestProject2InstanceTagProjects):
    account: accountTest
    project: testTMtestProject2
    name: Projects
    type: TESTINSTANCE

tm.test.Tag(testTMtestProject2InstanceTagRequirements):
    account: accountTest
    project: testTMtestProject2
    name: Requirements
    type: TESTINSTANCE

tm.test.Instance(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance1):
    account: accountTest
    project: testTMtestProject2
    name: Create new project
    script: testTMtestProject2TestScriptAdminProjectsCreate
    testCycle: testTMtestProject2ReleaseProtoTestCycleSystemTest
    responsible: testTMuserManu
    plannedExecution: 2011-03-18
    tags:
      - testTMtestProject2InstanceTagAdministration
      - testTMtestProject2InstanceTagProjects

tm.test.Instance(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2):
    account: accountTest
    project: testTMtestProject2
    name: Create new project (2)
    script: testTMtestProject2TestScriptAdminProjectsCreate
    testCycle: testTMtestProject2ReleaseProtoTestCycleSystemTest
    responsible: testTMuserChristian
    plannedExecution: 2011-03-18
    tags:
      - testTMtestProject2InstanceTagAdministration
      - testTMtestProject2InstanceTagProjects

tm.test.Instance(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsEditInstance1):
    account: accountTest
    project: testTMtestProject2
    name: Edit project details
    script: testTMtestProject2TestScriptAdminProjectsEdit
    testCycle: testTMtestProject2ReleaseProtoTestCycleSystemTest
    responsible: testTMuserGwen
    plannedExecution: 2011-03-19
    tags:
      - testTMtestProject2InstanceTagAdministration
      - testTMtestProject2InstanceTagProjects

tm.test.InstanceParam(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance1ParamProjCat):
    account: accountTest
    project: testTMtestProject2
    scriptParam: testTMtestProject2TestScriptAdminProjectsCreateParamProjectCategory
    instance: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance1
    value:

tm.test.InstanceParam(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2ParamProjCat):
    account: accountTest
    project: testTMtestProject2
    scriptParam: testTMtestProject2TestScriptAdminProjectsCreateParamProjectCategory
    instance: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2
    value: "2011"

tm.test.InstanceParam(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance1ParamProjName):
    account: accountTest
    project: testTMtestProject2
    scriptParam: testTMtestProject2TestScriptAdminProjectsCreateParamProjectName
    instance: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance1
    value: SAP Roll-out Denmark

tm.test.InstanceParam(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2ParamProjName):
    account: accountTest
    project: testTMtestProject2
    scriptParam: testTMtestProject2TestScriptAdminProjectsCreateParamProjectName
    instance: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2
    value: SAP Roll-out Finland

tm.test.Instance(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptReqCreateInstance1):
    account: accountTest
    project: testTMtestProject2
    name: Register new requirement
    script: testTMtestProject2TestScriptReqCreate
    testCycle: testTMtestProject2ReleaseProtoTestCycleUserAcceptanceTest
    responsible: testTMuserChristian
    plannedExecution: 2011-03-19
    tags:
      - testTMtestProject2InstanceTagRequirements

tm.test.Run(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1):
    account: accountTest
    project: testTMtestProject2
    instance: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2
    tester: testTMuserGwen
    executionDate: 2011-03-19 09:45:23
    status: 3
    temporary: false

tm.test.RunStep(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1Step1):
    account: accountTest
    project: testTMtestProject2
    run: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1
    position: 1
    name: Step 1
    description: Enter the URL /admin/projects
    expectedResult: Projects administration page is shown
    actualResult:
    status: 2

tm.test.RunStep(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1Step2):
    account: accountTest
    project: testTMtestProject2
    run: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1
    position: 2
    name: Step 2
    description: "Select project category 2011 and click on New project"
    expectedResult: A new node appears in the tree under the selected project category
    actualResult: 
    status: 3

tm.test.RunStep(testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1Step3):
    account: accountTest
    project: testTMtestProject2
    run: testTMtestProject2ReleaseProtoTestCycleSystemTestScriptAdminProjectsCreateInstance2Run1
    position: 3
    name: Step 3
    description: "Enter SAP Roll-out Denmark and press enter"
    expectedResult: "New project SAP Roll-out Denmark is available"
    actualResult:
    status: 2

tm.Defect(testTMtestProject2Defect1):
    account: accountTest
    project: testTMtestProject2
    created: 2011-05-02
    name: The application does not start
    submittedBy: testTMuserGwen
    assignedTo: testTMuserManu

tm.Defect(testTMtestProject2Defect2):
    account: accountTest
    project: testTMtestProject2
    name: Test for naturalID
    submittedBy: testTMuserNikola

tm.Defect(testTMtestProject2Defect3):
    account: accountTest
    project: testTMtestProject2
    created: 2011-05-03
    name: Issue with tabularasa
    submittedBy: testTMuserManu
    assignedTo: testTMuserManu

tm.Defect(testTMtestProject1Defect1):
    account: accountTest
    project: testTMtestProject1
    name: Box is not at the right place
    submittedBy: testTMuserFilip

tm.Defect(testTMtestProject1Defect2):
    account: accountTest
    project: testTMtestProject1
    name: Action buttons are not named consistently
    submittedBy: testTMuserNikola




